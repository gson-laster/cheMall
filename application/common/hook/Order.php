<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/7/19 0019
 * Time: 下午 3:45
 */

namespace app\common\hook;
use app\common\model\Actively;
use think\Controller;
use think\Db;
use think\Log;

/**
 * 订单钩子
 * Class Order
 * @package app\index\hook
 */
class Order extends Controller {
  
  protected $activelyMdl;
  protected $active_res;
  protected function _initialize () {
    parent::_initialize(); // TODO: Change the autogenerated stub
    $this->activelyMdl = new Actively();
  }
  
  /**
   * 单个商品下单成功
   * @author: slide
   * @param array $params
   */
  public function oneAddSuccess($orderId='', $userId=''){
    //查询当前触发活动的钩子
    $this->buildActive($orderId, $userId, 'Order@oneAddSuccess');
    // dump($active_res);
  }
  
  /**
   * 多个商品下单成功
   * @author: slide
   * @param array $params
   */
  public function mutiAddSuccess($orderId='', $userId=''){
    $this->buildActive($orderId, $userId, 'Order@mutiAddSuccess');
  
  }
  
  /**
   * 开始支付
   * @author: slide
   * @param array $paams
   */
  public function PayBeagin($orderId='', $userId=''){
    $this->buildActive($orderId, $userId, 'Order@PayBeagin', 1);
  
  }
  
  /**
   * 支付完成
   * @author: slide
   * @param array $paams
   */
  public function PaySuccess($orderId='', $userId=''){
    $this->buildActive($orderId, $userId, 'Order@PaySuccess', 2);
  }
  
  /**
   * 发货成功
   * @author: slide
   * @param array $params
   */
  public function SendSuccess($orderId='', $userId=''){
    $this->buildActive($orderId, $userId, 'Order@SendSuccess');
  }
  
  /**
   * 收货成功
   * @author: slide
   * @param array $params
   */
  public function GetSuccess($params = []){}
  
  /**
   * 查询活动
   * @author: slide
   * @param array $where
   * @return mixed
   *
   */
  public function getActively($where = []){
    return $this->activelyMdl->where($where)->where('status', 1)->select();
  }
  
  /**
   * 构建活动
   * @author: slide
   * @param $userId
   * @param $hook
   * @throws \think\Exception
   * @throws \think\exception\PDOException
   *
   */
  public function buildActive($orderId, $userId, $hook, $pay_status = 1){
    $active_res = $this->getActively(['hook' => $hook]);
    Log::write('活动'.var_export($active_res, true));
    foreach ($active_res as $k => $v){
      list($table_namse, $field) = explode('@', $v['field']);
      if($table_namse == 'user' && $field == 'user_vb'){
        if($v['first_action']){
          $this->BuyGoodsFirst($orderId, $userId, $v['active_goods'], $pay_status) && accountLog($userId, $v['value'], 1, $v['title']);
          Db::name('actively_note')->insert([
            'actively_id' => $v['id'],
            'user_id' => $userId,
            'field' => $field,
            'value' => $v['value'],
            'hook' => $v['hook'],
            'createtime' => time()
          ]);
        }else{
          accountLog($userId, $v['value'], 1, $v['title']);
          Db::name('actively_note')->insert([
            'actively_id' => $v['id'],
            'user_id' => $userId,
            'field' => $field,
            'value' => $v['value'],
            'hook' => $v['hook'],
            'createtime' => time()
          ]);
        }
      }else if($table_namse == 'user' && $field == 'agent_type'){
        $agent_type = Db::name($table_namse)->where('id', $userId)->value($field);
        if($agent_type < $v['value'] && $agent_type != 0) continue;
        if($v['first_action']) {
          if($this->BuyGoodsFirst($orderId, $userId, $v['active_goods'], $pay_status)){
            Db::name( $table_namse )->where( 'id', $userId )->update( [ $field => $v[ 'value' ] ] );
            $template_taskprocessing = cache_data( 'site_config' )[ 'template_taskprocessing' ];
            if ($template_taskprocessing) {
              $wechat           = new Weichat();
    
              $user_info = Db::name('user')->find($userId);
              $arr = [
                1 => '省级代理',
                2 => '市级代理',
                3 => '县级代理',
                4 => '经销商'
              ];
              $template_send_re = $wechat->sendTemplateMsg( WEB_DOMAIN . url( 'home/user/index'), 'TASK_PROCESSING', ["任务处理通知 ","代理商等级升级通知","【代理商等级升级通知】亲爱的".$user_info['nickname']."您已于".date('Y-m-d H:i:s',time())."由".$arr[$agent_type]."升级为".$arr[$v[ 'value' ]],"谢谢您的支持与厚爱"],$userId );
    
              $template_send_res = $wechat->sendTemplateMsg( WEB_DOMAIN . url( 'home/user/index'), 'TASK_PROCESSING', ["任务处理通知 ","团队伙伴付款通知","【团队伙伴付款通知】您的伙伴".$user_info['nickname']."已于".date('Y-m-d H:i:s',time())."购买产品".$arr[$v[ 'value' ]],"谢谢您的支持与厚爱"],$user_info['pid'] );
    
              $template_send_ress = $wechat->sendTemplateMsg( WEB_DOMAIN . url( 'home/user/index'), 'TASK_PROCESSING', ["任务处理通知 ","团队伙伴付款通知","【团队伙伴付款通知】您的伙伴".$user_info['nickname']."已于".date('Y-m-d H:i:s',time())."购买产品".$arr[$v[ 'value' ]],"谢谢您的支持与厚爱"],$user_info['parent_agent'] );
    
              if ( $template_send_re ) {
                Log::write( '代理任务:模板消息发送成功', 'info');
              } else {
                Log::write( '代理任务:模板消息发送失败', 'info');
              }
            }
            Db::name('actively_note')->insert([
              'actively_id' => $v['id'],
              'user_id' => $userId,
              'field' => $field,
              'value' => $v['value'],
              'hook' => $v['hook'],
              'createtime' => time()
            ]);
            L('active_arr1');
          }
        }else{
          Db::name( $table_namse )->where( 'id', $userId )->update( [ $field => $v[ 'value' ] ] );
          Db::name('actively_note')->insert([
            'actively_id' => $v['id'],
            'user_id' => $userId,
            'field' => $field,
            'value' => $v['value'],
            'hook' => $v['hook'],
            'createtime' => time()
          ]);
          L('active_arr2');
        }
      }
      
    }
  }
  
  /**
   * 用户是否首次购买该商品
   * @author: slide
   * @param     $orderId
   * @param int $pay_status
   * @param int $order_status
   * @return bool
   * @throws \think\db\exception\DataNotFoundException
   * @throws \think\db\exception\ModelNotFoundException
   * @throws \think\exception\DbException
   *
   */
  public function BuyGoodsFirst($orderId, $userId, $goods_id, $pay_status=2){
    $flag = false;
    $order_res = Db::name('order')->field('order_id')->where(['pay_status' => $pay_status, 'user_id'=>$userId])->select();
    $now_order_goods = Db::name('order_goods')->field("goods_id")->where('order_id', $orderId)->select();
  
    $active_goods_arr = explode(',', $goods_id);
  
    $order_res = removeArrValue($order_res,'order_id', $orderId);
    Log::write('active_ids',var_export($active_goods_arr, true));
    Log::write('now_goods_ids',var_export($now_order_goods, true));
    if(!$order_res||count($order_res) == 0 || $order_res == ''||is_null($order_res)){
      foreach ($now_order_goods as $key => $value){
        Log::write(var_export($value, true));
        Log::write('value'.var_export(in_array($value['goods_id'], $active_goods_arr), true));
        if(in_array($value['goods_id'], $active_goods_arr)){
          $flag = true;
          break;
        }
      }
    }else{
      $order_res = convert_arr_key($order_res, 'order_id');
      $order_ids = implode(',', array_keys($order_res));
      if($order_ids == '') return $flag=true;
      $order_goods = Db::name('order_goods')->field("goods_id")->where("order_id IN ({$order_ids})")->select();
      $order_old_res = array_keys(convert_arr_key($order_goods, 'goods_id'));
      $order_goods_now_res = array_keys(convert_arr_key($now_order_goods, 'goods_id'));
      Log::write('$order_old_res',var_export($order_old_res, true));
      Log::write('$order_goods_now_res',var_export($order_goods_now_res, true));
      foreach ($order_old_res as $key => $value){
        foreach ($order_goods_now_res as $k => $v){
          if(in_array($v, $active_goods_arr)){
            if($value == $v ) {
              $flag = false;
              break;
            }else{
              $flag = true;
            }
          }
        }
      }
    }
    Log::write('标识'.var_export($flag, true));
    return $flag;
  }
}
