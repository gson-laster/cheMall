<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/7/21 0021
 * Time: 下午 3:42
 */

namespace app\home\controller;
use app\api\controller\Sms;
use app\common\Hook;
use think\Cache;
use think\Config;
use think\Controller;
use think\Db;
use think\Log;
use app\common\model\Order;
use think\Session;

/**
 * 付钱啦处理类
 * Class Fuqianla
 * @package app\home\controller\
 */
class Fuqianla extends Controller {
 
  protected $config;
  protected function _initialize () {
    parent::_initialize(); // TODO: Change the autogenerated stub
    $this->config = Config::get('Fql');
  }
  
  /**
   * 唤起支付
   * @author: slide
   * @param string $orderId
   * @param string $backurl
   *
   */
  public function topay($orderId = '', $backurl = '', $order_type="goods"){
    // 查询订单信息
    if($order_type == 'goods'){
      $order_info = (new Order())->find($orderId);
      $need_pay = $order_info['total_amount'];
      $text = '订单';
      if(!$order_info) return $this->error('不存在这样的订单');
      // if(!input('uid') || !Session::get('qt_userId')) return $this->error('您还没有登录');
      if($order_info['pay_status'] == 2) {
        $this->error('该订单已经支付过了,不用重新支付');
      }
    }else if ($order_type == 'recharge'){
      $recharge_res = Db::name('apply_recharge')->find($orderId);
      
      if(!$recharge_res) return $this->error('不存在这样的订单');
      if($recharge_res['status'] == 1) {
        $this->error('该订单已经支付过了,不用重新支付');
      }
      $order_info = [
        'order_sn' => 'Recharge'.$orderId,
        'order_amount' => floatval($recharge_res['money']) * 100,
        'user_id' => $recharge_res['user_id'],
      ];
      $need_pay = $order_info['order_amount'];
      $text='在线充值';
    }
    
    // 构建
    $order_attibute = [
      "app_id"  => $this->config['appid'],
      "order_no" => $order_info['order_sn'],
      "amount" =>  $need_pay. '', // string
      "channel" => $this->config['channel'],
      "subject" => Config::get('SMS_SIGN').$text.'-'. $order_info['order_sn'].'-在线支付',
      "notify_url" => $this->config['notify_url'],
      "user_id" => $order_info['user_id'],
      "order_type" => $order_type,
      "return_url" => WEB_DOMAIN .$backurl. "/res/success",
      'order_id' => $orderId
    ];
    
    $this->assign('data', $order_attibute);
    return $this->fetch('topay');
  }
  
  /**
   * 付钱啦异步通知
   * @author: slide
   */
  public function fuqianla_notify(){
    Log::write('付钱啦异步通知：'.var_export(input(), true));
    if ( !$this->request->isPost() ) {
      echo 'success';
      exit;
    }
    $data = $this->request->post();
    $optional = explode('&', $data['optional']);
    $optional_arr = [];
    $msg = 'fail';
    foreach ($optional as $k => $v){
      $temp = explode('=', $v);
      $optional_arr[$temp[0]] = $temp[1];
    }
    if($optional_arr['order_type'] == 'goods'){
      $orderMdl = new Order();
      
      $order_info = $orderMdl->where('order_sn', $data['order_no'])->find();
  
      Log::write('订单信息'.var_export($order_info, true));
      if(!$order_info) echo 'success';
    }
    
    if($data['ret_code'] == '0000' && $data['ret_info'] == '支付成功'){
      if(Cache::has($data['order_no'])){
        echo 'success';
        return;
      }
      Cache::set($data['order_no'], 1);
      
      if($optional_arr['order_type'] == 'goods'){
        if($order_info['pay_status'] == 2) {
          echo 'success';
          return;
        }
        $pay_data['pay_status'] = 2;
        $pay_data['pay_name'] = '付钱啦支付';
        $orderMdl->where("order_id", $order_info['order_id'])->update($pay_data);
//        $this->order_handle($order_info, $data['order_no']);
        $orderMdl->orderPay($order_info, 'Fuqianla',null,function ($res) {
          if($res['code'] == 'success') echo 'success';
          else echo 'fail';
        });
        $msg = 'success';
      }else if ($optional_arr['order_type'] == 'recharge'){
        
        $recharge_id = explode('Recharge', $data['order_no'])[1];
        $rechage_res = Db::name('apply_recharge')->find($recharge_id);
        
        if($rechage_res['status'] == 1) {
          echo 'success';
          return;
        }
        Db::name('apply_recharge')->where('id', $recharge_id)->update([
          'status'=>1
        ]);
        $this->recharge_data($rechage_res, $data['order_no']);
        $msg = 'success';
      }
    }else{
      if($optional_arr['order_type'] == 'goods') {
        $pay_data[ 'pay_status' ]   = 3;
        $pay_data[ 'order_status' ] = 4;
        $order_data[ 'user_note' ]  = '用户支付失败,已经取消订单';
        $order_data[ 'pay_name' ]   = '付钱啦支付';
        $orderMdl->data( $pay_data );
        $orderMdl->where( "order_id", $order_info[ 'order_id' ] )->save();
        $msg = 'fail';
      }
    }
    Log::write('付钱啦回调处理结果'.var_export($msg));
    echo $msg;
  }
  
  /**
   * 订单处理
   * @author: slide
   * @param $order_res
   *
   */
  public function order_handle($order_res, $order_no){
    Db::startTrans();
    
    try{
  
      // 计算订单利润，然后分成
      $orderMdl = new Order();
      $orderGoods = $orderMdl->getOrderGoods($order_res['order_id']);
      // 1、计算商品里利润
      $profit = 0;
      $goods_total = 0;
      foreach ($orderGoods as $k => $v) {
        $profit += $v['profit'];
        $goods_total += $v['goods_num'];
      }
      // 2、计算折扣
      $zk = $order_res['total_amount'] - $order_res['order_amount'];
  
      // 3、计算存利润
      $profit_res = $profit - $zk;
      
      
      // dump($user_vb->user_vb);exit;
      $order_data[ 'order_id' ]     = $order_res[ 'order_id' ];
      $order_data[ 'order_status' ] = 2;
      $order_data[ 'user_note' ]    = '用户支付成功';
      $order_data['pay_name'] = '付钱啦支付';
      //更新订单表
      $order_data[ 'pay_time' ]   = time();
      $order_data[ 'pay_status' ] = 2;
      \Think\Log::write( 'update data' . json_encode( $order_data ), 'info' );
      $orderMdl->data( $order_data, true );
      $res = $orderMdl->allowField( true )->isUpdate( true )->save(); // 保存订单
      \Think\Log::write( 'update result' . $res, 'info' );
      //订单操作表
      //订单操作日志记录
      $order_action_data = [ 'order_id'        => $order_res[ 'order_id' ],   //订单号
                             'action_user'     => Session::get( 'qt_userId' ),   //订单操作人
                             'order_status'    => $order_data[ 'order_status' ],  //订单状态
                             'shipping_status' => 1,  //配送状态
                             'pay_status'      => $order_data[ 'pay_status' ],  //支付状态
                             'action_note'     => $order_data[ 'pay_status' ] == 2 ? '支付成功成功' : '支付失败', //操作备注
                             'log_time'        => time(), 'status_desc' => $order_data[ 'pay_status' ] == 2 ? '前台用户支付成功' : '前台用户支付成失败' ];
      $order_action      = Db::name( 'order_action' );
      $order_action_res  = $order_action->insert( $order_action_data );
  
      // 返还折扣
      $orderMdl->payendBackZk($order_res['order_id']);
      if($profit_res <= 0) return true;
      $orderMdl->shareRedAccount($profit_res);
      
      Db::commit();
  
      $params = ['order_id' => $order_res['order_id'], 'userId'=>$order_res['user_id']];
      Hook::call('Order', 'PaySuccess', $params);
  
      //      // 清楚缓存
      //      if(Cache::has($order_no)) {
      //        Cache::rm($order_no);
      //      }
      // 判断需不需要短信通知 && 模板消息通知
      $sms_add_order      = cache_data( 'site_config' )[ 'do_pay_success' ];
      $template_add_order = cache_data( 'site_config' )[ 'template_pay_success' ];
      // dump(Session::get($res));
      if ( $sms_add_order ) {
        // 短信通知
        $sms          = new Sms();
        $mobile       = Session::get( 'userInfo' )[ 'phone' ];
        $scren        = 'do_pay_success';
        $send_sms_res = $sms->sendSMS( $mobile, $scren, [ Config::get( 'SMS_SIGN' ), $order_res[ 'order_sn' ], $order_res[ 'consignee' ] ] );
        if ( $send_sms_res ) {
          Log::write( '支付短信:' . $order_res[ 'order_sn' ] . '短信发送成功', 'info' );
        } else {
          Log::write( '支付短信:' . $order_res[ 'order_sn' ] . '短信发送失败', 'info' );
        }
      }
      $wechat           = new Weichat();
      $weichat_code     = ( isset( $order_res[ 'weichat_sn' ] ) && $order_res[ 'weichat_sn' ] != '' ) ? '微信订单号' . $order_res[ 'weichat_sn' ] : '';
      if ( $template_add_order ) {
        // 模板消息通知
    
        $template_send_re = $wechat->sendTemplateMsg( WEB_DOMAIN . url( 'home/order/detail', [ 'order_id' => $order_res['order_id'] ] ), 'PAY_SUCCESS', [ "您在" . Config::get( 'SMS_SIGN' ) . "有一笔订单支付成功!", $order_res[ 'order_amount' ], '付钱啦支付', "订单包含{$goods_total}件商品。", $order_res[ 'order_sn' ], $weichat_code, "我们将尽快给您安排发货，请及时注意物流信息。" ] );
        if ( $template_send_re ) {
          Log::write( '订单:' . $order_res[ 'order_sn' ] . '模板消息发送成功', 'info' );
        } else {
          Log::write( '订单:' . $order_res[ 'order_sn' ] . '模板消息发送失败', 'info' );
        }
      }
  
      // 发送消息模板消息给客服
      $kefu_uid = getUserInfoBywhere('phone', Config::get('shipping_kefu_account'));
      $template_send_kefu_res = $wechat->sendTemplateMsg('','TASK_PROCESSING',[
        '亲爱的发货专员商城有一笔新的订单成功支付,赶快去发货吧!','订单发货','待办','请尽快处理！'
      ], $kefu_uid['id']);
      if ( $template_send_kefu_res ) {
        Log::write( '订单:' . $order_res[ 'order_sn' ] . '模板消息发送成功', 'info' );
      } else {
        Log::write( '订单:' . $order_res[ 'order_sn' ] . '模板消息发送失败', 'info' );
      }
      
    }catch (\Exception $e){
      L('订单支付失败Fuqianla'.$e);
      Db::rollback();
      $order_data[ 'pay_time' ]   = time();
      $order_data[ 'pay_status' ] = 3;
      //订单操作日志记录
      $order_action_data = [ 'order_id'        => $order_res[ 'order_id' ],   //订单号
                             'action_user'     => $order_res['user_id'],   //订单操作人
                             'order_status'    => $order_data[ 'order_status' ],  //订单状态
                             'shipping_status' => 1,  //配送状态
                             'pay_status'      => $order_data[ 'pay_status' ],  //支付状态
                             'action_note'     => $order_data[ 'pay_status' ] == 2 ? '支付成功成功' : '支付失败', //操作备注
                             'log_time'        => time(), 'status_desc' => $order_data[ 'pay_status' ] == 2 ? '前台用户支付成功' : '前台用户支付失败' ];
      $order_action      = Db::name( 'order_action' );
      $order_action_res  = $order_action->insert( $order_action_data );
    }
    
  }
  
  public function error_msg(){
    Log::write('错误信息'.var_export($this->request->post()));
  }
  
  /**
   * 处理充值
   * @author: slide
   * @param $rechage_res
   *
   */
  public function recharge_data($rechage_res, $order_no){
    $update_data = [
      'status' => 1,
      'updatetime' => time()
    ];
    Db::name('apply_recharge')->where('id', $rechage_res['id'])->update($update_data);
    accountLog($rechage_res['user_id'], $rechage_res['money'], 1, '在线充值到账');
    
  }
}
